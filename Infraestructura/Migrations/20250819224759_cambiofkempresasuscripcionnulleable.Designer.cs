// <auto-generated />
using System;
using Infraestructura.LogicaAccesoDatos.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infraestructura.Migrations
{
    [DbContext(typeof(CuidarteContext))]
    [Migration("20250819224759_cambiofkempresasuscripcionnulleable")]
    partial class cambiofkempresasuscripcionnulleable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LogicaNegocio.Entidades.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CI")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("boolean");

                    b.Property<DateOnly>("FechaNacimiento")
                        .HasColumnType("date");

                    b.Property<int?>("SuscripcionId")
                        .HasColumnType("integer");

                    b.Property<int>("TipoPlanId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SuscripcionId");

                    b.HasIndex("TipoPlanId");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Empresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Eliminado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("SuscripcionId")
                        .HasColumnType("integer");

                    b.Property<int>("TipoPlanId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SuscripcionId");

                    b.HasIndex("TipoPlanId")
                        .IsUnique();

                    b.ToTable("Empresas");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Mensualidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Eliminado")
                        .HasColumnType("boolean");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("FechaGeneracion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaPago")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PeriodoDesde")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("PeriodoHasta")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("Mensualidades", (string)null);
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Servicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClienteId")
                        .HasColumnType("integer");

                    b.Property<int?>("ClienteId1")
                        .HasColumnType("integer");

                    b.Property<int?>("TareaId")
                        .HasColumnType("integer");

                    b.Property<int?>("TareaId1")
                        .HasColumnType("integer");

                    b.Property<int?>("TipoPlanId")
                        .HasColumnType("integer");

                    b.Property<int>("cantServicios")
                        .HasColumnType("integer");

                    b.Property<int>("tipoServicioId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("ClienteId1");

                    b.HasIndex("TareaId");

                    b.HasIndex("TareaId1");

                    b.HasIndex("TipoPlanId");

                    b.HasIndex("tipoServicioId");

                    b.ToTable("Servicios");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Suscripcion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClienteId")
                        .HasColumnType("integer");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("boolean");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<int?>("EmpresaId1")
                        .HasColumnType("integer");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PlanId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ProximoCobro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("TipoPlanId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId1");

                    b.HasIndex("PlanId");

                    b.HasIndex("TipoPlanId");

                    b.ToTable("Suscripciones", (string)null);
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Tarea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("integer");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("boolean");

                    b.Property<int>("EmpleadoResponsableId")
                        .HasColumnType("integer");

                    b.Property<int>("Estado")
                        .HasColumnType("integer");

                    b.Property<DateTime>("fecha")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("EmpleadoResponsableId");

                    b.ToTable("Tareas");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.TipoPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Eliminado")
                        .HasColumnType("boolean");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("integer");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Precio")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("TiposPlanes");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.TipoServicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Eliminado")
                        .HasColumnType("boolean");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("PrecioHora")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("TipoServicios");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminador")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");

                    b.HasDiscriminator().HasValue("Usuario");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Administrador", b =>
                {
                    b.HasBaseType("LogicaNegocio.Entidades.Usuario");

                    b.HasDiscriminator().HasValue("Administrador");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Funcionario", b =>
                {
                    b.HasBaseType("LogicaNegocio.Entidades.Usuario");

                    b.HasDiscriminator().HasValue("Funcionario");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Cliente", b =>
                {
                    b.HasOne("LogicaNegocio.Entidades.Suscripcion", "Suscripcion")
                        .WithMany("Clientes")
                        .HasForeignKey("SuscripcionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("LogicaNegocio.Entidades.TipoPlan", "Plan")
                        .WithMany()
                        .HasForeignKey("TipoPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("LogicaNegocio.ValueObject.Email", "Email", b1 =>
                        {
                            b1.Property<int>("ClienteId")
                                .HasColumnType("integer");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Email");

                            b1.HasKey("ClienteId");

                            b1.ToTable("Clientes");

                            b1.WithOwner()
                                .HasForeignKey("ClienteId");
                        });

                    b.OwnsOne("LogicaNegocio.ValueObject.NombreCompleto", "NombreCompleto", b1 =>
                        {
                            b1.Property<int>("ClienteId")
                                .HasColumnType("integer");

                            b1.Property<string>("Apellido")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Apellido");

                            b1.Property<string>("Nombre")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Nombre");

                            b1.HasKey("ClienteId");

                            b1.ToTable("Clientes");

                            b1.WithOwner()
                                .HasForeignKey("ClienteId");
                        });

                    b.OwnsOne("LogicaNegocio.ValueObject.Telefono", "Telefono", b1 =>
                        {
                            b1.Property<int>("ClienteId")
                                .HasColumnType("integer");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Telefono");

                            b1.HasKey("ClienteId");

                            b1.ToTable("Clientes");

                            b1.WithOwner()
                                .HasForeignKey("ClienteId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("NombreCompleto")
                        .IsRequired();

                    b.Navigation("Plan");

                    b.Navigation("Suscripcion");

                    b.Navigation("Telefono")
                        .IsRequired();
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Empresa", b =>
                {
                    b.HasOne("LogicaNegocio.Entidades.Suscripcion", "Suscripcion")
                        .WithMany()
                        .HasForeignKey("SuscripcionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("LogicaNegocio.Entidades.TipoPlan", "Plan")
                        .WithOne("Empresa")
                        .HasForeignKey("LogicaNegocio.Entidades.Empresa", "TipoPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("LogicaNegocio.ValueObject.Telefono", "TelefonoContacto", b1 =>
                        {
                            b1.Property<int>("EmpresaId")
                                .HasColumnType("integer");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("TelefonoContacto");

                            b1.HasKey("EmpresaId");

                            b1.ToTable("Empresas");

                            b1.WithOwner()
                                .HasForeignKey("EmpresaId");
                        });

                    b.Navigation("Plan");

                    b.Navigation("Suscripcion");

                    b.Navigation("TelefonoContacto")
                        .IsRequired();
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Mensualidad", b =>
                {
                    b.HasOne("LogicaNegocio.Entidades.Suscripcion", "Subscription")
                        .WithMany("Mensualidades")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Servicio", b =>
                {
                    b.HasOne("LogicaNegocio.Entidades.Cliente", null)
                        .WithMany("ServiciosDisponibles")
                        .HasForeignKey("ClienteId");

                    b.HasOne("LogicaNegocio.Entidades.Cliente", null)
                        .WithMany("ServiciosExtras")
                        .HasForeignKey("ClienteId1");

                    b.HasOne("LogicaNegocio.Entidades.Tarea", null)
                        .WithMany("ServiciosExtras")
                        .HasForeignKey("TareaId");

                    b.HasOne("LogicaNegocio.Entidades.Tarea", null)
                        .WithMany("serviciosUsados")
                        .HasForeignKey("TareaId1");

                    b.HasOne("LogicaNegocio.Entidades.TipoPlan", null)
                        .WithMany("Servicios")
                        .HasForeignKey("TipoPlanId");

                    b.HasOne("LogicaNegocio.Entidades.TipoServicio", "tipoServicio")
                        .WithMany()
                        .HasForeignKey("tipoServicioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tipoServicio");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Suscripcion", b =>
                {
                    b.HasOne("LogicaNegocio.Entidades.Empresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId1");

                    b.HasOne("LogicaNegocio.Entidades.TipoPlan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LogicaNegocio.Entidades.TipoPlan", null)
                        .WithMany("Suscripciones")
                        .HasForeignKey("TipoPlanId");

                    b.Navigation("Empresa");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Tarea", b =>
                {
                    b.HasOne("LogicaNegocio.Entidades.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogicaNegocio.Entidades.Usuario", "EmpleadoResponsable")
                        .WithMany()
                        .HasForeignKey("EmpleadoResponsableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("EmpleadoResponsable");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Usuario", b =>
                {
                    b.OwnsOne("LogicaNegocio.ValueObject.Email", "Email", b1 =>
                        {
                            b1.Property<int>("UsuarioId")
                                .HasColumnType("integer");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Email");

                            b1.HasKey("UsuarioId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("Usuarios");

                            b1.WithOwner()
                                .HasForeignKey("UsuarioId");
                        });

                    b.OwnsOne("LogicaNegocio.ValueObject.NombreCompleto", "NombreCompleto", b1 =>
                        {
                            b1.Property<int>("UsuarioId")
                                .HasColumnType("integer");

                            b1.Property<string>("Apellido")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Apellido");

                            b1.Property<string>("Nombre")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Nombre");

                            b1.HasKey("UsuarioId");

                            b1.ToTable("Usuarios");

                            b1.WithOwner()
                                .HasForeignKey("UsuarioId");
                        });

                    b.OwnsOne("LogicaNegocio.ValueObject.Usuario.Password", "Password", b1 =>
                        {
                            b1.Property<int>("UsuarioId")
                                .HasColumnType("integer");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Password");

                            b1.HasKey("UsuarioId");

                            b1.ToTable("Usuarios");

                            b1.WithOwner()
                                .HasForeignKey("UsuarioId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("NombreCompleto")
                        .IsRequired();

                    b.Navigation("Password")
                        .IsRequired();
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Cliente", b =>
                {
                    b.Navigation("ServiciosDisponibles");

                    b.Navigation("ServiciosExtras");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Suscripcion", b =>
                {
                    b.Navigation("Clientes");

                    b.Navigation("Mensualidades");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.Tarea", b =>
                {
                    b.Navigation("ServiciosExtras");

                    b.Navigation("serviciosUsados");
                });

            modelBuilder.Entity("LogicaNegocio.Entidades.TipoPlan", b =>
                {
                    b.Navigation("Empresa");

                    b.Navigation("Servicios");

                    b.Navigation("Suscripciones");
                });
#pragma warning restore 612, 618
        }
    }
}
